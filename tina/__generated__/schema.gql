# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  solution(relativePath: String): Solution!
  solutionConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SolutionFilter): SolutionConnection!
  calculator(relativePath: String): Calculator!
  calculatorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CalculatorFilter): CalculatorConnection!
  faq(relativePath: String): Faq!
  faqConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FaqFilter): FaqConnection!
}

input DocumentFilter {
  settings: SettingsFilter
  page: PageFilter
  solution: SolutionFilter
  calculator: CalculatorFilter
  faq: FaqFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Settings | Page | Solution | Calculator | Faq | Folder

type SettingsSiteInfo {
  title: String!
  description: String
  keywords: String
}

type SettingsContact {
  email: String
  phone: String
  address: String
}

type SettingsSocial {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
}

type SettingsNavigationMenuItemsSubmenuItems {
  label: String
  href: String
}

type SettingsNavigationMenuItems {
  label: String!
  href: String!
  hasSubmenu: Boolean
  submenuItems: [SettingsNavigationMenuItemsSubmenuItems]
}

type SettingsNavigation {
  logo: String
  menuItems: [SettingsNavigationMenuItems]
}

type SettingsFooterQuickLinks {
  text: String
  href: String
}

type SettingsFooterServiceLinks {
  text: String
  href: String
}

type SettingsFooterSocialLinks {
  platform: String
  username: String
  url: String
}

type SettingsFooter {
  logo: String
  logoAlt: String
  description: String
  quickLinksTitle: String
  quickLinks: [SettingsFooterQuickLinks]
  servicesTitle: String
  serviceLinks: [SettingsFooterServiceLinks]
  socialTitle: String
  socialLinks: [SettingsFooterSocialLinks]
  copyrightText: String
}

type SettingsTheme {
  primaryColor: String
  secondaryColor: String
  darkMode: Boolean
}

type Settings implements Node & Document {
  siteInfo: SettingsSiteInfo
  contact: SettingsContact
  social: SettingsSocial
  navigation: SettingsNavigation
  footer: SettingsFooter
  theme: SettingsTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SettingsSiteInfoFilter {
  title: StringFilter
  description: StringFilter
  keywords: StringFilter
}

input SettingsContactFilter {
  email: StringFilter
  phone: StringFilter
  address: StringFilter
}

input SettingsSocialFilter {
  facebook: StringFilter
  instagram: StringFilter
  linkedin: StringFilter
  twitter: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input SettingsNavigationMenuItemsSubmenuItemsFilter {
  label: StringFilter
  href: StringFilter
}

input SettingsNavigationMenuItemsFilter {
  label: StringFilter
  href: StringFilter
  hasSubmenu: BooleanFilter
  submenuItems: SettingsNavigationMenuItemsSubmenuItemsFilter
}

input SettingsNavigationFilter {
  logo: ImageFilter
  menuItems: SettingsNavigationMenuItemsFilter
}

input SettingsFooterQuickLinksFilter {
  text: StringFilter
  href: StringFilter
}

input SettingsFooterServiceLinksFilter {
  text: StringFilter
  href: StringFilter
}

input SettingsFooterSocialLinksFilter {
  platform: StringFilter
  username: StringFilter
  url: StringFilter
}

input SettingsFooterFilter {
  logo: ImageFilter
  logoAlt: StringFilter
  description: StringFilter
  quickLinksTitle: StringFilter
  quickLinks: SettingsFooterQuickLinksFilter
  servicesTitle: StringFilter
  serviceLinks: SettingsFooterServiceLinksFilter
  socialTitle: StringFilter
  socialLinks: SettingsFooterSocialLinksFilter
  copyrightText: StringFilter
}

input SettingsThemeFilter {
  primaryColor: StringFilter
  secondaryColor: StringFilter
  darkMode: BooleanFilter
}

input SettingsFilter {
  siteInfo: SettingsSiteInfoFilter
  contact: SettingsContactFilter
  social: SettingsSocialFilter
  navigation: SettingsNavigationFilter
  footer: SettingsFooterFilter
  theme: SettingsThemeFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type PageBlocksHero {
  heading: String
  subheading: String
  description: String
  buttonText: String
  buttonLink: String
}

type PageBlocksEngagement {
  heading: String
  text: JSON
}

type PageBlocksChallengesCards {
  groupTitle: String
  content: JSON
  resultText: String
}

type PageBlocksChallenges {
  heading: String
  cards: [PageBlocksChallengesCards]
}

type PageBlocksMoreSolutionsSolutions {
  slug: String
  icon: String
  title: String
  description: String
}

type PageBlocksMoreSolutions {
  heading: String
  subtitle: String
  solutions: [PageBlocksMoreSolutionsSolutions]
}

type PageBlocksMoreSolutionsHomeSolutions {
  slug: String
  icon: String
  title: String
  description: String
}

type PageBlocksMoreSolutionsHome {
  heading: String
  subtitle: String
  solutions: [PageBlocksMoreSolutionsHomeSolutions]
}

type PageBlocksWhyDirayFeatures {
  icon: String
  title: String
  description: String
}

type PageBlocksWhyDiray {
  heading: String
  subheading: String
  features: [PageBlocksWhyDirayFeatures]
}

type PageBlocksAbout {
  heading: String
  founderName: String
  founderTitle: String
  biography: JSON
  founderImage: String
  clientLogosImage: String
}

type PageBlocksFaqQuestions {
  category: String
  question: String
  answer: JSON
}

type PageBlocksFaq {
  heading: String
  subheading: String
  questions: [PageBlocksFaqQuestions]
}

type PageBlocksLogoCarousel {
  title: String
  description: String
  logoImage: String
  showAnimation: Boolean
}

type PageBlocksContact {
  heading: String
  subheading: String
  whatsapp: String
  email: String
}

type PageBlocksFooterQuickLinks {
  text: String
  href: String
}

type PageBlocksFooterServiceLinks {
  text: String
  href: String
}

type PageBlocksFooterSocialLinks {
  platform: String
  username: String
  url: String
}

type PageBlocksFooter {
  logo: String
  logoAlt: String
  description: String
  quickLinksTitle: String
  quickLinks: [PageBlocksFooterQuickLinks]
  servicesTitle: String
  serviceLinks: [PageBlocksFooterServiceLinks]
  socialTitle: String
  socialLinks: [PageBlocksFooterSocialLinks]
  copyrightText: String
}

union PageBlocks = PageBlocksHero | PageBlocksEngagement | PageBlocksChallenges | PageBlocksMoreSolutions | PageBlocksMoreSolutionsHome | PageBlocksWhyDiray | PageBlocksAbout | PageBlocksFaq | PageBlocksLogoCarousel | PageBlocksContact | PageBlocksFooter

type Page implements Node & Document {
  title: String!
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageBlocksHeroFilter {
  heading: StringFilter
  subheading: StringFilter
  description: StringFilter
  buttonText: StringFilter
  buttonLink: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksEngagementFilter {
  heading: StringFilter
  text: RichTextFilter
}

input PageBlocksChallengesCardsFilter {
  groupTitle: StringFilter
  content: RichTextFilter
  resultText: StringFilter
}

input PageBlocksChallengesFilter {
  heading: StringFilter
  cards: PageBlocksChallengesCardsFilter
}

input PageBlocksMoreSolutionsSolutionsFilter {
  slug: StringFilter
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input PageBlocksMoreSolutionsFilter {
  heading: StringFilter
  subtitle: StringFilter
  solutions: PageBlocksMoreSolutionsSolutionsFilter
}

input PageBlocksMoreSolutionsHomeSolutionsFilter {
  slug: StringFilter
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input PageBlocksMoreSolutionsHomeFilter {
  heading: StringFilter
  subtitle: StringFilter
  solutions: PageBlocksMoreSolutionsHomeSolutionsFilter
}

input PageBlocksWhyDirayFeaturesFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input PageBlocksWhyDirayFilter {
  heading: StringFilter
  subheading: StringFilter
  features: PageBlocksWhyDirayFeaturesFilter
}

input PageBlocksAboutFilter {
  heading: StringFilter
  founderName: StringFilter
  founderTitle: StringFilter
  biography: RichTextFilter
  founderImage: ImageFilter
  clientLogosImage: ImageFilter
}

input PageBlocksFaqQuestionsFilter {
  category: StringFilter
  question: StringFilter
  answer: RichTextFilter
}

input PageBlocksFaqFilter {
  heading: StringFilter
  subheading: StringFilter
  questions: PageBlocksFaqQuestionsFilter
}

input PageBlocksLogoCarouselFilter {
  title: StringFilter
  description: StringFilter
  logoImage: ImageFilter
  showAnimation: BooleanFilter
}

input PageBlocksContactFilter {
  heading: StringFilter
  subheading: StringFilter
  whatsapp: StringFilter
  email: StringFilter
}

input PageBlocksFooterQuickLinksFilter {
  text: StringFilter
  href: StringFilter
}

input PageBlocksFooterServiceLinksFilter {
  text: StringFilter
  href: StringFilter
}

input PageBlocksFooterSocialLinksFilter {
  platform: StringFilter
  username: StringFilter
  url: StringFilter
}

input PageBlocksFooterFilter {
  logo: ImageFilter
  logoAlt: StringFilter
  description: StringFilter
  quickLinksTitle: StringFilter
  quickLinks: PageBlocksFooterQuickLinksFilter
  servicesTitle: StringFilter
  serviceLinks: PageBlocksFooterServiceLinksFilter
  socialTitle: StringFilter
  socialLinks: PageBlocksFooterSocialLinksFilter
  copyrightText: StringFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  engagement: PageBlocksEngagementFilter
  challenges: PageBlocksChallengesFilter
  moreSolutions: PageBlocksMoreSolutionsFilter
  moreSolutionsHome: PageBlocksMoreSolutionsHomeFilter
  whyDiray: PageBlocksWhyDirayFilter
  about: PageBlocksAboutFilter
  faq: PageBlocksFaqFilter
  logoCarousel: PageBlocksLogoCarouselFilter
  contact: PageBlocksContactFilter
  footer: PageBlocksFooterFilter
}

input PageFilter {
  title: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type SolutionBlocksSolutionHero {
  heroTitle: String!
  heroHighlight: String
  heroSubtitle: String
  backgroundImage: String
  videoSrc: String
  videoStartTime: Float
  videoEndTime: Float
  overlayOpacity: Float
}

type SolutionBlocksSolutionIntro {
  introTitle: String!
  introDescription: [String]
  minPrice: String
  minDuration: String
}

type SolutionBlocksWhatYouReceiveItems {
  icon: String
  title: String
  description: [String]
}

type SolutionBlocksWhatYouReceive {
  items: [SolutionBlocksWhatYouReceiveItems]
}

union SolutionBlocksSolutionCalculatorCalculatorId = Calculator

type SolutionBlocksSolutionCalculatorFactorsOptions {
  label: String
  multiplier: Float
}

type SolutionBlocksSolutionCalculatorFactors {
  name: String
  options: [SolutionBlocksSolutionCalculatorFactorsOptions]
}

type SolutionBlocksSolutionCalculator {
  calculatorType: String
  calculatorId: SolutionBlocksSolutionCalculatorCalculatorId
  basePrice: Float
  factors: [SolutionBlocksSolutionCalculatorFactors]
}

type SolutionBlocksSolutionTimelineSteps {
  icon: String
  title: String
  description: String
}

type SolutionBlocksSolutionTimeline {
  timelineTitle: String
  steps: [SolutionBlocksSolutionTimelineSteps]
}

type SolutionBlocksWhyDirayFeatures {
  icon: String
  title: String
  description: String
}

type SolutionBlocksWhyDiray {
  heading: String!
  subheading: String
  features: [SolutionBlocksWhyDirayFeatures]
}

type SolutionBlocksMoreSolutions {
  heading: String!
}

type SolutionBlocksContact {
  heading: String!
  subheading: String
  whatsapp: String
  email: String
}

union SolutionBlocks = SolutionBlocksSolutionHero | SolutionBlocksSolutionIntro | SolutionBlocksWhatYouReceive | SolutionBlocksSolutionCalculator | SolutionBlocksSolutionTimeline | SolutionBlocksWhyDiray | SolutionBlocksMoreSolutions | SolutionBlocksContact

type Solution implements Node & Document {
  title: String!
  icon: String
  excerpt: String
  blocks: [SolutionBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input SolutionBlocksSolutionHeroFilter {
  heroTitle: StringFilter
  heroHighlight: StringFilter
  heroSubtitle: StringFilter
  backgroundImage: ImageFilter
  videoSrc: StringFilter
  videoStartTime: NumberFilter
  videoEndTime: NumberFilter
  overlayOpacity: NumberFilter
}

input SolutionBlocksSolutionIntroFilter {
  introTitle: StringFilter
  introDescription: StringFilter
  minPrice: StringFilter
  minDuration: StringFilter
}

input SolutionBlocksWhatYouReceiveItemsFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input SolutionBlocksWhatYouReceiveFilter {
  items: SolutionBlocksWhatYouReceiveItemsFilter
}

input SolutionBlocksSolutionCalculatorCalculatorIdFilter {
  calculator: CalculatorFilter
}

input SolutionBlocksSolutionCalculatorFactorsOptionsFilter {
  label: StringFilter
  multiplier: NumberFilter
}

input SolutionBlocksSolutionCalculatorFactorsFilter {
  name: StringFilter
  options: SolutionBlocksSolutionCalculatorFactorsOptionsFilter
}

input SolutionBlocksSolutionCalculatorFilter {
  calculatorType: StringFilter
  calculatorId: SolutionBlocksSolutionCalculatorCalculatorIdFilter
  basePrice: NumberFilter
  factors: SolutionBlocksSolutionCalculatorFactorsFilter
}

input SolutionBlocksSolutionTimelineStepsFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input SolutionBlocksSolutionTimelineFilter {
  timelineTitle: StringFilter
  steps: SolutionBlocksSolutionTimelineStepsFilter
}

input SolutionBlocksWhyDirayFeaturesFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input SolutionBlocksWhyDirayFilter {
  heading: StringFilter
  subheading: StringFilter
  features: SolutionBlocksWhyDirayFeaturesFilter
}

input SolutionBlocksMoreSolutionsFilter {
  heading: StringFilter
}

input SolutionBlocksContactFilter {
  heading: StringFilter
  subheading: StringFilter
  whatsapp: StringFilter
  email: StringFilter
}

input SolutionBlocksFilter {
  solutionHero: SolutionBlocksSolutionHeroFilter
  solutionIntro: SolutionBlocksSolutionIntroFilter
  whatYouReceive: SolutionBlocksWhatYouReceiveFilter
  solutionCalculator: SolutionBlocksSolutionCalculatorFilter
  solutionTimeline: SolutionBlocksSolutionTimelineFilter
  whyDiray: SolutionBlocksWhyDirayFilter
  moreSolutions: SolutionBlocksMoreSolutionsFilter
  contact: SolutionBlocksContactFilter
}

input SolutionFilter {
  title: StringFilter
  icon: StringFilter
  excerpt: StringFilter
  blocks: SolutionBlocksFilter
}

type SolutionConnectionEdges {
  cursor: String!
  node: Solution
}

type SolutionConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SolutionConnectionEdges]
}

type CalculatorConfigPlansActivities {
  name: String
  duration: String
  hours: String
  cost: String
}

type CalculatorConfigPlans {
  id: String!
  label: String!
  range: String
  totalCost: Float
  totalHours: Float
  duration: String
  activities: [CalculatorConfigPlansActivities]
}

type CalculatorConfigSalaryRanges {
  id: String!
  label: String!
  min: Float
  max: Float
  multiplier: Float
}

type CalculatorConfigTrainingTypesDurations {
  hours: Float
  consultingHours: Float
  cost: Float
  weeks: Float
  additionalPerSession: Float
}

type CalculatorConfigTrainingTypes {
  type: String
  durations: [CalculatorConfigTrainingTypesDurations]
}

type CalculatorConfigVariablesOptions {
  value: String
  label: String
}

type CalculatorConfigVariables {
  name: String
  label: String
  type: String
  defaultValue: String
  min: Float
  max: Float
  step: Float
  options: [CalculatorConfigVariablesOptions]
}

type CalculatorConfig {
  plans: [CalculatorConfigPlans]
  salaryRanges: [CalculatorConfigSalaryRanges]
  trainingTypes: [CalculatorConfigTrainingTypes]
  hourlyRate: Float
  requiresLeadForm: Boolean
  showPDF: Boolean
  formula: String
  variables: [CalculatorConfigVariables]
}

type CalculatorDisplay {
  title: String
  subtitle: String
  buttonText: String
  warningMessage: String
  successMessage: String
}

type Calculator implements Node & Document {
  name: String!
  type: String!
  description: String
  config: CalculatorConfig
  display: CalculatorDisplay
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CalculatorConfigPlansActivitiesFilter {
  name: StringFilter
  duration: StringFilter
  hours: StringFilter
  cost: StringFilter
}

input CalculatorConfigPlansFilter {
  id: StringFilter
  label: StringFilter
  range: StringFilter
  totalCost: NumberFilter
  totalHours: NumberFilter
  duration: StringFilter
  activities: CalculatorConfigPlansActivitiesFilter
}

input CalculatorConfigSalaryRangesFilter {
  id: StringFilter
  label: StringFilter
  min: NumberFilter
  max: NumberFilter
  multiplier: NumberFilter
}

input CalculatorConfigTrainingTypesDurationsFilter {
  hours: NumberFilter
  consultingHours: NumberFilter
  cost: NumberFilter
  weeks: NumberFilter
  additionalPerSession: NumberFilter
}

input CalculatorConfigTrainingTypesFilter {
  type: StringFilter
  durations: CalculatorConfigTrainingTypesDurationsFilter
}

input CalculatorConfigVariablesOptionsFilter {
  value: StringFilter
  label: StringFilter
}

input CalculatorConfigVariablesFilter {
  name: StringFilter
  label: StringFilter
  type: StringFilter
  defaultValue: StringFilter
  min: NumberFilter
  max: NumberFilter
  step: NumberFilter
  options: CalculatorConfigVariablesOptionsFilter
}

input CalculatorConfigFilter {
  plans: CalculatorConfigPlansFilter
  salaryRanges: CalculatorConfigSalaryRangesFilter
  trainingTypes: CalculatorConfigTrainingTypesFilter
  hourlyRate: NumberFilter
  requiresLeadForm: BooleanFilter
  showPDF: BooleanFilter
  formula: StringFilter
  variables: CalculatorConfigVariablesFilter
}

input CalculatorDisplayFilter {
  title: StringFilter
  subtitle: StringFilter
  buttonText: StringFilter
  warningMessage: StringFilter
  successMessage: StringFilter
}

input CalculatorFilter {
  name: StringFilter
  type: StringFilter
  description: StringFilter
  config: CalculatorConfigFilter
  display: CalculatorDisplayFilter
}

type CalculatorConnectionEdges {
  cursor: String!
  node: Calculator
}

type CalculatorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CalculatorConnectionEdges]
}

type Faq implements Node & Document {
  question: String!
  answer: JSON!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FaqFilter {
  question: StringFilter
  answer: RichTextFilter
}

type FaqConnectionEdges {
  cursor: String!
  node: Faq
}

type FaqConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FaqConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateSolution(relativePath: String!, params: SolutionMutation!): Solution!
  createSolution(relativePath: String!, params: SolutionMutation!): Solution!
  updateCalculator(relativePath: String!, params: CalculatorMutation!): Calculator!
  createCalculator(relativePath: String!, params: CalculatorMutation!): Calculator!
  updateFaq(relativePath: String!, params: FaqMutation!): Faq!
  createFaq(relativePath: String!, params: FaqMutation!): Faq!
}

input DocumentUpdateMutation {
  settings: SettingsMutation
  page: PageMutation
  solution: SolutionMutation
  calculator: CalculatorMutation
  faq: FaqMutation
  relativePath: String
}

input DocumentMutation {
  settings: SettingsMutation
  page: PageMutation
  solution: SolutionMutation
  calculator: CalculatorMutation
  faq: FaqMutation
}

input SettingsSiteInfoMutation {
  title: String
  description: String
  keywords: String
}

input SettingsContactMutation {
  email: String
  phone: String
  address: String
}

input SettingsSocialMutation {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
}

input SettingsNavigationMenuItemsSubmenuItemsMutation {
  label: String
  href: String
}

input SettingsNavigationMenuItemsMutation {
  label: String
  href: String
  hasSubmenu: Boolean
  submenuItems: [SettingsNavigationMenuItemsSubmenuItemsMutation]
}

input SettingsNavigationMutation {
  logo: String
  menuItems: [SettingsNavigationMenuItemsMutation]
}

input SettingsFooterQuickLinksMutation {
  text: String
  href: String
}

input SettingsFooterServiceLinksMutation {
  text: String
  href: String
}

input SettingsFooterSocialLinksMutation {
  platform: String
  username: String
  url: String
}

input SettingsFooterMutation {
  logo: String
  logoAlt: String
  description: String
  quickLinksTitle: String
  quickLinks: [SettingsFooterQuickLinksMutation]
  servicesTitle: String
  serviceLinks: [SettingsFooterServiceLinksMutation]
  socialTitle: String
  socialLinks: [SettingsFooterSocialLinksMutation]
  copyrightText: String
}

input SettingsThemeMutation {
  primaryColor: String
  secondaryColor: String
  darkMode: Boolean
}

input SettingsMutation {
  siteInfo: SettingsSiteInfoMutation
  contact: SettingsContactMutation
  social: SettingsSocialMutation
  navigation: SettingsNavigationMutation
  footer: SettingsFooterMutation
  theme: SettingsThemeMutation
}

input PageBlocksHeroMutation {
  heading: String
  subheading: String
  description: String
  buttonText: String
  buttonLink: String
}

input PageBlocksEngagementMutation {
  heading: String
  text: JSON
}

input PageBlocksChallengesCardsMutation {
  groupTitle: String
  content: JSON
  resultText: String
}

input PageBlocksChallengesMutation {
  heading: String
  cards: [PageBlocksChallengesCardsMutation]
}

input PageBlocksMoreSolutionsSolutionsMutation {
  slug: String
  icon: String
  title: String
  description: String
}

input PageBlocksMoreSolutionsMutation {
  heading: String
  subtitle: String
  solutions: [PageBlocksMoreSolutionsSolutionsMutation]
}

input PageBlocksMoreSolutionsHomeSolutionsMutation {
  slug: String
  icon: String
  title: String
  description: String
}

input PageBlocksMoreSolutionsHomeMutation {
  heading: String
  subtitle: String
  solutions: [PageBlocksMoreSolutionsHomeSolutionsMutation]
}

input PageBlocksWhyDirayFeaturesMutation {
  icon: String
  title: String
  description: String
}

input PageBlocksWhyDirayMutation {
  heading: String
  subheading: String
  features: [PageBlocksWhyDirayFeaturesMutation]
}

input PageBlocksAboutMutation {
  heading: String
  founderName: String
  founderTitle: String
  biography: JSON
  founderImage: String
  clientLogosImage: String
}

input PageBlocksFaqQuestionsMutation {
  category: String
  question: String
  answer: JSON
}

input PageBlocksFaqMutation {
  heading: String
  subheading: String
  questions: [PageBlocksFaqQuestionsMutation]
}

input PageBlocksLogoCarouselMutation {
  title: String
  description: String
  logoImage: String
  showAnimation: Boolean
}

input PageBlocksContactMutation {
  heading: String
  subheading: String
  whatsapp: String
  email: String
}

input PageBlocksFooterQuickLinksMutation {
  text: String
  href: String
}

input PageBlocksFooterServiceLinksMutation {
  text: String
  href: String
}

input PageBlocksFooterSocialLinksMutation {
  platform: String
  username: String
  url: String
}

input PageBlocksFooterMutation {
  logo: String
  logoAlt: String
  description: String
  quickLinksTitle: String
  quickLinks: [PageBlocksFooterQuickLinksMutation]
  servicesTitle: String
  serviceLinks: [PageBlocksFooterServiceLinksMutation]
  socialTitle: String
  socialLinks: [PageBlocksFooterSocialLinksMutation]
  copyrightText: String
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  engagement: PageBlocksEngagementMutation
  challenges: PageBlocksChallengesMutation
  moreSolutions: PageBlocksMoreSolutionsMutation
  moreSolutionsHome: PageBlocksMoreSolutionsHomeMutation
  whyDiray: PageBlocksWhyDirayMutation
  about: PageBlocksAboutMutation
  faq: PageBlocksFaqMutation
  logoCarousel: PageBlocksLogoCarouselMutation
  contact: PageBlocksContactMutation
  footer: PageBlocksFooterMutation
}

input PageMutation {
  title: String
  blocks: [PageBlocksMutation]
}

input SolutionBlocksSolutionHeroMutation {
  heroTitle: String
  heroHighlight: String
  heroSubtitle: String
  backgroundImage: String
  videoSrc: String
  videoStartTime: Float
  videoEndTime: Float
  overlayOpacity: Float
}

input SolutionBlocksSolutionIntroMutation {
  introTitle: String
  introDescription: [String]
  minPrice: String
  minDuration: String
}

input SolutionBlocksWhatYouReceiveItemsMutation {
  icon: String
  title: String
  description: [String]
}

input SolutionBlocksWhatYouReceiveMutation {
  items: [SolutionBlocksWhatYouReceiveItemsMutation]
}

input SolutionBlocksSolutionCalculatorFactorsOptionsMutation {
  label: String
  multiplier: Float
}

input SolutionBlocksSolutionCalculatorFactorsMutation {
  name: String
  options: [SolutionBlocksSolutionCalculatorFactorsOptionsMutation]
}

input SolutionBlocksSolutionCalculatorMutation {
  calculatorType: String
  calculatorId: String
  basePrice: Float
  factors: [SolutionBlocksSolutionCalculatorFactorsMutation]
}

input SolutionBlocksSolutionTimelineStepsMutation {
  icon: String
  title: String
  description: String
}

input SolutionBlocksSolutionTimelineMutation {
  timelineTitle: String
  steps: [SolutionBlocksSolutionTimelineStepsMutation]
}

input SolutionBlocksWhyDirayFeaturesMutation {
  icon: String
  title: String
  description: String
}

input SolutionBlocksWhyDirayMutation {
  heading: String
  subheading: String
  features: [SolutionBlocksWhyDirayFeaturesMutation]
}

input SolutionBlocksMoreSolutionsMutation {
  heading: String
}

input SolutionBlocksContactMutation {
  heading: String
  subheading: String
  whatsapp: String
  email: String
}

input SolutionBlocksMutation {
  solutionHero: SolutionBlocksSolutionHeroMutation
  solutionIntro: SolutionBlocksSolutionIntroMutation
  whatYouReceive: SolutionBlocksWhatYouReceiveMutation
  solutionCalculator: SolutionBlocksSolutionCalculatorMutation
  solutionTimeline: SolutionBlocksSolutionTimelineMutation
  whyDiray: SolutionBlocksWhyDirayMutation
  moreSolutions: SolutionBlocksMoreSolutionsMutation
  contact: SolutionBlocksContactMutation
}

input SolutionMutation {
  title: String
  icon: String
  excerpt: String
  blocks: [SolutionBlocksMutation]
}

input CalculatorConfigPlansActivitiesMutation {
  name: String
  duration: String
  hours: String
  cost: String
}

input CalculatorConfigPlansMutation {
  id: String
  label: String
  range: String
  totalCost: Float
  totalHours: Float
  duration: String
  activities: [CalculatorConfigPlansActivitiesMutation]
}

input CalculatorConfigSalaryRangesMutation {
  id: String
  label: String
  min: Float
  max: Float
  multiplier: Float
}

input CalculatorConfigTrainingTypesDurationsMutation {
  hours: Float
  consultingHours: Float
  cost: Float
  weeks: Float
  additionalPerSession: Float
}

input CalculatorConfigTrainingTypesMutation {
  type: String
  durations: [CalculatorConfigTrainingTypesDurationsMutation]
}

input CalculatorConfigVariablesOptionsMutation {
  value: String
  label: String
}

input CalculatorConfigVariablesMutation {
  name: String
  label: String
  type: String
  defaultValue: String
  min: Float
  max: Float
  step: Float
  options: [CalculatorConfigVariablesOptionsMutation]
}

input CalculatorConfigMutation {
  plans: [CalculatorConfigPlansMutation]
  salaryRanges: [CalculatorConfigSalaryRangesMutation]
  trainingTypes: [CalculatorConfigTrainingTypesMutation]
  hourlyRate: Float
  requiresLeadForm: Boolean
  showPDF: Boolean
  formula: String
  variables: [CalculatorConfigVariablesMutation]
}

input CalculatorDisplayMutation {
  title: String
  subtitle: String
  buttonText: String
  warningMessage: String
  successMessage: String
}

input CalculatorMutation {
  name: String
  type: String
  description: String
  config: CalculatorConfigMutation
  display: CalculatorDisplayMutation
}

input FaqMutation {
  question: String
  answer: JSON
}

schema {
  query: Query
  mutation: Mutation
}
